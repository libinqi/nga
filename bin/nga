#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var _path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 5;

  console.log();

  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=roas* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }

    console.log();
  }

  mkdir(path, function () {
    copy(_path.join(__dirname, '..', 'templates'), path);
    complete();

    // package.json
    var pkg = {
      "name": app_name,
      "version": "1.0.0",
      "description": "An Angular 4 Webpack Starter kit featuring Angular 4 (Router, Http, Forms, Services, Tests, E2E, Coverage), Karma, Protractor, Jasmine, Istanbul, TypeScript, and Webpack by nga",
      "keywords": [
        "angular",
        "webpack",
        "typescript"
      ],
      "license": "MIT",
      "scripts": {
        "build:aot:prod": "npm run clean:dist && npm run clean:aot && cross-env BUILD_AOT=1 npm run webpack -- --config config/webpack.prod.js  --progress --profile --bail",
        "build:aot": "npm run build:aot:prod",
        "build:dev": "npm run clean:dist && npm run webpack -- --config config/webpack.dev.js --progress --profile",
        "build:prod": "npm run clean:dist && npm run webpack -- --config config/webpack.prod.js  --progress --profile --bail",
        "build": "npm run build:dev",
        "ci:aot": "npm run lint && npm run test && npm run build:aot && npm run e2e",
        "ci:jit": "npm run lint && npm run test && npm run build:prod && npm run e2e",
        "ci:nobuild": "npm run lint && npm test && npm run e2e",
        "ci:testall": "npm run lint && npm run test && npm run build:prod && npm run e2e && npm run build:aot && npm run e2e",
        "ci:travis": "npm run lint && npm run test && npm run build:aot && npm run e2e:travis",
        "ci": "npm run ci:testall",
        "clean:dll": "npm run rimraf -- dll",
        "clean:aot": "npm run rimraf -- compiled",
        "clean:dist": "npm run rimraf -- dist",
        "clean:install": "npm set progress=false && npm install",
        "clean": "npm cache clean --force && npm run rimraf -- node_modules doc coverage dist compiled dll",
        "e2e:live": "npm-run-all -p -r server:prod:ci protractor:live",
        "e2e:travis": "npm-run-all -p -r server:prod:ci protractor:delay",
        "e2e": "npm-run-all -p -r server:prod:ci protractor",
        "lint": "npm run tslint \"src/**/*.ts\"",
        "node": "node",
        "postinstall": "npm run webdriver:update",
        "postversion": "git push && git push --tags",
        "preclean:install": "npm run clean",
        "preversion": "npm test",
        "protractor": "protractor",
        "protractor:delay": "sleep 3 && npm run protractor",
        "protractor:live": "protractor --elementExplorer",
        "rimraf": "rimraf",
        "server:dev:hmr": "npm run server:dev -- --inline --hot",
        "server:dev": "npm run webpack-dev-server -- --config config/webpack.dev.js --open --progress --profile --watch --content-base src/",
        "server:prod": "http-server dist -c-1 --cors",
        "server:prod:ci": "http-server dist -p 3000 -c-1 --cors",
        "server": "npm run server:dev",
        "start:hmr": "npm run server:dev:hmr",
        "start": "npm run server:dev",
        "test": "npm run lint && karma start",
        "tslint": "tslint",
        "version": "npm run build",
        "watch:dev:hmr": "npm run watch:dev -- --hot",
        "watch:dev": "npm run build:dev -- --watch",
        "watch:prod": "npm run build:prod -- --watch",
        "watch:test": "npm run test -- --auto-watch --no-single-run",
        "watch": "npm run watch:dev",
        "webdriver-manager": "webdriver-manager",
        "webdriver:start": "npm run webdriver-manager start",
        "webdriver:update": "webdriver-manager update",
        "webpack-dev-server": "node --max_old_space_size=4096 node_modules/webpack-dev-server/bin/webpack-dev-server.js",
        "webpack": "node --max_old_space_size=4096 node_modules/webpack/bin/webpack.js"
      },
      "dependencies": {
        "@angular/animations": "~4.1.2",
        "@angular/common": "~4.1.2",
        "@angular/compiler": "~4.1.2",
        "@angular/core": "~4.1.2",
        "@angular/forms": "~4.1.2",
        "@angular/http": "~4.1.2",
        "@angular/platform-browser": "~4.1.2",
        "@angular/platform-browser-dynamic": "~4.1.2",
        "@angular/platform-server": "~4.1.2",
        "@angular/router": "~4.1.2",
        "@angularclass/hmr": "~1.2.2",
        "@angularclass/hmr-loader": "~3.0.2",
        "core-js": "^2.4.1",
        "http-server": "^0.9.0",
        "ie-shim": "^0.1.0",
        "jquery": "^3.2.1",
        "lodash": "^4.17.4",
        "moment": "^2.18.1",
        "reflect-metadata": "^0.1.10",
        "rxjs": "~5.0.2",
        "zone.js": "0.8.5"
      },
      "devDependencies": {
        "@angular/compiler-cli": "~4.0.3",
        "@types/hammerjs": "^2.0.34",
        "@types/jasmine": "2.5.45",
        "@types/jquery": "^3.2.4",
        "@types/lodash": "^4.14.66",
        "@types/moment": "^2.13.0",
        "@types/node": "^7.0.13",
        "@types/source-map": "^0.5.0",
        "@types/uglify-js": "^2.6.28",
        "@types/webpack": "^2.2.15",
        "add-asset-html-webpack-plugin": "^1.0.2",
        "angular2-template-loader": "^0.6.2",
        "assets-webpack-plugin": "^3.5.1",
        "awesome-typescript-loader": "~3.1.2",
        "codelyzer": "~2.1.1",
        "copy-webpack-plugin": "^4.0.1",
        "cross-env": "^5.0.0",
        "css-loader": "^0.28.0",
        "exports-loader": "^0.6.4",
        "expose-loader": "^0.7.3",
        "extract-text-webpack-plugin": "~2.1.0",
        "file-loader": "^0.11.1",
        "find-root": "^1.0.0",
        "gh-pages": "^1.0.0",
        "html-webpack-plugin": "^2.28.0",
        "imports-loader": "^0.7.1",
        "inline-manifest-webpack-plugin": "^3.0.1",
        "istanbul-instrumenter-loader": "2.0.0",
        "jasmine-core": "^2.5.2",
        "json-loader": "^0.5.4",
        "karma": "^1.6.0",
        "karma-chrome-launcher": "^2.0.0",
        "karma-coverage": "^1.1.1",
        "karma-jasmine": "^1.1.0",
        "karma-mocha-reporter": "^2.2.3",
        "karma-remap-coverage": "^0.1.4",
        "karma-sourcemap-loader": "^0.3.7",
        "karma-webpack": "~2.0.3",
        "ng-router-loader": "^2.1.0",
        "ngc-webpack": "~2.0.0",
        "node-sass": "^4.5.2",
        "npm-run-all": "^4.0.2",
        "optimize-js-plugin": "0.0.4",
        "parse5": "^3.0.2",
        "preload-webpack-plugin": "^1.2.2",
        "protractor": "^5.1.1",
        "raw-loader": "0.5.1",
        "rimraf": "~2.6.1",
        "sass-loader": "^6.0.3",
        "script-ext-html-webpack-plugin": "^1.7.1",
        "source-map-loader": "^0.2.1",
        "string-replace-loader": "~1.2.0",
        "style-loader": "^0.18.1",
        "to-string-loader": "^1.1.5",
        "ts-node": "^3.0.2",
        "tslib": "^1.6.1",
        "tslint": "~4.5.1",
        "tslint-loader": "^3.5.2",
        "typescript": "~2.2.2",
        "url-loader": "^0.5.8",
        "webpack": "~2.6.1",
        "webpack-dev-middleware": "^1.10.1",
        "webpack-dev-server": "~2.4.2",
        "webpack-dll-bundles-plugin": "^1.0.0-beta.5",
        "webpack-merge": "~4.1.0"
      },
      "engines": {
        "node": ">= 4.2.1",
        "npm": ">= 3"
      }
    };

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));

    complete();
  });
}

function copy_template(from, to) {
  from = _path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function (stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32' &&
    process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(_path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = _path.basename(_path.resolve(destinationPath));

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

// 判断该目录是否存在，不存在需要先创建目录
function exists(src, dst, callback) {
  fs.exists(dst, function (exists) {
    // 已存在
    if (exists) {
      callback(src, dst);
    }
    // 不存在
    else {
      fs.mkdir(dst, function () {
        callback(src, dst);
      });
    }
  });
};

/*
 * 复制目录中的所有文件包括子目录
 * @param{ String } 需要复制的目录
 * @param{ String } 复制到指定的目录
 */
function copy(src, dst) {
  // 读取目录中的所有文件/目录
  fs.readdir(src, function (err, paths) {
    if (err) {
      throw err;
    }
    paths.forEach(function (path) {
      var _src = src + '/' + path,
        _dst = dst + '/' + path,
        readable, writable;
      fs.stat(_src, function (err, st) {
        if (err) {
          throw err;
        }
        // 判断是否为文件
        if (st.isFile()) {
          // 创建文件     
          write(_dst, fs.readFileSync(_src));
        }
        // 如果是目录则递归调用自身
        else if (st.isDirectory()) {
          exists(_src, _dst, copy);
        }
      });
    });
  });
};

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, {
    mode: mode || 0666
  });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function (err) {
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}